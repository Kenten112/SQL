--TABLA--
CREATE TABLE bank_products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    interest_rate DECIMAL(5, 2),
    monthly_fee DECIMAL(6, 2),
    minimum_balance DECIMAL(10, 2)
);

INSERT INTO bank_products (product_id, product_name, product_type, interest_rate, monthly_fee, minimum_balance)
VALUES
    (1, 'Savings Account', 'Savings', 0.75, 0.00, 100.00),
    (2, 'Checking Account', 'Checking', 0.25, 5.00, 50.00),
    (3, 'Business Account', 'Business', 1.50, 10.00, 500.00),
    (4, 'Credit Card', 'Credit Card', 18.99, 0.00, 0.00),
    (5, 'Mortgage Loan', 'Loan', 3.25, 0.00, 100000.00),
    (6, 'Certificate of Deposit', 'Savings', 1.50, 0.00, 1000.00),
    (7, 'Student Checking Account', 'Checking', 0.10, 0.00, 10.00),
    (8, 'Business Credit Card', 'Credit Card', 16.99, 0.00, 0.00),
    (9, 'Home Equity Loan', 'Loan', 4.50, 0.00, 50000.00),
    (10, 'IRA Account', 'Savings', 1.25, 0.00, 500.00),
    (11, 'Personal Loan', 'Loan', 8.75, 0.00, 5000.00),
    (12, 'Money Market Account', 'Savings', 1.00, 0.00, 500.00),
    (13, 'Youth Savings Account', 'Savings', 0.50, 0.00, 10.00),
    (14, 'Rewards Credit Card', 'Credit Card', 21.99, 0.00, 0.00),
    (15, 'Auto Loan', 'Loan', 4.25, 0.00, 20000.00);

--SQL--
--MOSTRAS LOS NOMBRES DE LOS PRODUCTOS--
select distinct product_name
from bank_products
order by product_name desc;

--MOSTRAR LOS NOMBRES DE LOS PRODUCTOS QUE EL TIPO DE PRODUCTO SEA DE SAVING O CHEKING--
select product_type, product_name
from bank_products
where product_type='Savings' or product_type='Checking';

--MOSTRAR LOS PRODUCTOS DE AHORROS CON TASA DE 0.75 O MAYOR Y SIN PAGO MENSUAL--
select product_name, product_type, interest_rate, monthly_fee
from bank_products
where product_type='Savings' and interest_rate>=0.75 and monthly_fee=0
order by interest_rate desc;



--TABLA DE EMPLEADOS--
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    department TEXT,
    salary DECIMAL(10, 2),
    years_of_experience INTEGER
);

INSERT INTO employees (employee_id, department, salary, years_of_experience)
VALUES
    (1, 'Finance', 60000.00, 5),
    (2, 'Marketing', 55000.00, 3),
    (3, 'Sales', 75000.00, 8),
    (4, 'Engineering', 80000.00, 7),
    (5, 'HR', 50000.00, 2),
    (6, 'Finance', 70000.00, 6),
    (7, 'Marketing', 60000.00, 4),
    (8, 'Sales', 85000.00, 10),
    (9, 'Engineering', 90000.00, 9),
    (10, 'HR', 55000.00, 3),
    (11, 'Sales', 72000.00, 6),
    (12, 'Sales', 80000.00, 7),
    (13, 'Engineering', 85000.00, 8),
    (14, 'Engineering', 92000.00, 10);

--MOSTRAR LOS DEPARTAMENTOS QUE HAN GASTADO 300000 O MAS--
--AL CAMBIAR EL NOMBRE DE LA COLUMNA MEJOR NO USAR ESPACIOS--    
select sum(salary) as total_spent, department
from employees
group by department 
having total_spent>=300000
order by total_spent desc;

--CUANTOS EMPLEADOS HAY EN CADA DEPARTAMENTO--
select count(employee_id), department
from employees
group by department
order by count(employee_id) desc;

--PROMEDIO DE SALARIO GASTADO POR DEPARTAMENTO MAYOR A 70000--
select avg(salary) as salary_spent_per_year, department
from employees
group by department
having salary_spent_per_year>=70000;

--TABLA DE MARATON--
CREATE TABLE marathon (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
   participant_name TEXT,
   previous_experience TEXT,
   completion_fraction REAL);

INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Sadie Hawkins", "yes", 1);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Brandon Flowers", "no", 0.241);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Michael Scott", "no", 0.804);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Karamo Brown", "yes", 0.9512);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Antoni Porowski", "yes", 0.640);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Rajnighanda Kapoor", "no", 1);

--CUANTOS PARTICIPANTES HAY Y CUANTO PORCENTAJE REALIZARON--
select participant_name, round (completion_fraction*100,1) as completion_percent
from marathon
order by completion_percent desc;

--CUANTO PORCENTAJE REALIZARON LOS PARTICIPANTES--
select count(participant_name) as participant,
case when completion_fraction>=0.75 then '75%+'
when completion_fraction>=0.50 then '50%+'
when completion_fraction>=0.25 then '25%+'
else 'under 25%'
end as 'quarter_completed'
from marathon
group by quarter_completed
order by participant desc;


--TABLA MEDICA--
-- Create the 'prescriptions' table
CREATE TABLE prescriptions (
    person_ID INTEGER,
    geo TEXT,
    doctor_name TEXT,
    date_filled DATE,
    active TEXT
);

-- Create the 'medication' table
CREATE TABLE medication (
    person_ID INTEGER,
    medication_name TEXT,
    prescription_id INTEGER
);

-- Insert data into the 'prescriptions' table
INSERT INTO prescriptions (person_ID, geo, doctor_name, date_filled, active)
VALUES
    (1, '90210', 'Dr. Smith', '2024-01-10', 'Y'),
    (2, '30301', 'Dr. Johnson', '2022-11-25', 'N'),
    (3, '10001', 'Dr. Davis', '2023-02-05', 'Y'),
    (4, '60601', 'Dr. Patel', '2022-12-15', 'Y'),
    (5, '75201', 'Dr. Garcia', '2023-01-30', 'Y'),
    (6, '90210', 'Dr. Smith', '2023-04-15', 'Y'),
    (7, '30301', 'Dr. Johnson', '2023-04-16', 'Y'),
    (8, '10001', 'Dr. Davis', '2023-04-17', 'Y'),
    (9, '60601', 'Dr. Patel', '2023-04-18', 'Y'),
    (10, '75201', 'Dr. Garcia', '2023-04-19', 'Y'),
    (11, '90210', 'Dr. Smith', '2023-04-20', 'Y'),
    (12, '30301', 'Dr. Johnson', '2023-04-21', 'Y'),
    (13, '10001', 'Dr. Davis', '2023-04-22', 'N'),
    (14, '60601', 'Dr. Patel', '2023-04-23', 'Y'),
    (15, '75201', 'Dr. Garcia', '2023-04-24', 'Y'),
    (16, '90210', 'Dr. Smith', '2023-04-25', 'N'),
    (17, '30301', 'Dr. Johnson', '2023-04-26', 'Y'),
    (18, '10001', 'Dr. Davis', '2023-04-27', 'Y'),
    (19, '60601', 'Dr. Patel', '2023-04-28', 'N'),
    (20, '75201', 'Dr. Garcia', '2023-04-29', 'Y'),
    (21, '90210', 'Dr. Smith', '2023-04-30', 'N'),
    (22, '30301', 'Dr. Johnson', '2023-05-01', 'Y'),
    (23, '10001', 'Dr. Davis', '2023-05-02', 'Y'),
    (24, '60601', 'Dr. Patel', '2024-01-24', 'Y'),
    (25, '75201', 'Dr. Garcia', '2023-05-04', 'Y');

-- Insert data into the 'medication' table
INSERT INTO medication (person_ID, medication_name, prescription_id)
VALUES
    (1, 'Teamocil', 12345678),
    (2, 'Peppy Bismilk', 23456789),
    (3, 'Xanatab', 34567890),
    (4, 'Zonkify', 45678901),
    (5, 'Floopoxetine', 56789012),
    (6, 'Teamocil', 43890775),
    (7, 'Glumara', 78901234),
    (8, 'Xanatab', 89012345),
    (9, 'Zonkify', 90123456),
    (10, 'Floopoxetine', 31346578),
    (11, 'Zonkify', 46456798),
    (12, 'Xanatab', 67567809),
    (13, 'Teamocil', 54678911),
    (14, 'Peppy Bismilk', 21789021),
    (15, 'Zonkify', 76890132),
    (16, 'Peppy Bismilk', 26901234),
    (17, 'Floopoxetine', 84212345),
    (18, 'Floopoxetine', 36323456),
    (19, 'Floopoxetine', 23345678),
    (20, 'Xanatab', 63896789),
    (21, 'Zonkify', 25237890),
    (22, 'Peppy Bismilk', 14678901),
    (23, 'Zonkify', 85789012),
    (24, 'Teamocil', 42890123),
    (25, 'Glumara', 13901234);

--SQL--
select distinct prescriptions.doctor_name, medication.medication_name
from prescriptions inner join medication on prescriptions.person_ID = medication.person_ID
where prescriptions.doctor_name='Dr. Garcia'

select max(prescriptions.date_filled) as last_date, medication.medication_name
from medication inner join prescriptions on medication.person_id = prescriptions.person_id
where medication.medication_name = 'Zonkify'
